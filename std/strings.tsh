func Index(s string, substr string) int {
	sul := len(substr)
	ind := -1

	for i := 0; i < len(s); i++ {
		j := 0

		for ; j < sul; j++ {
			si := i + j
			char := s[si]

			if s[i+j] != substr[j] {
				break
			}
		}

		if j == sul {
			ind = i
			break
		}
	}
	return ind
}

func Contains(s string, substr string) bool {
	return Index(s, substr) >= 0
}

func Join(elems []string, sep string) string {
	s := ""
	l := len(elems)

	for i := 0; i < l; i++ {
		s = s + elems[i]

		if i < (l - 1) {
			s = s + sep
		}
	}
	return s
}

func HasPrefix(s string, prefix string) bool {
	l := len(prefix)

	if len(s) >= l {
		return s[:l] == prefix
	}
	return false
}

func HasSuffix(s string, suffix string) bool {
	l := len(suffix)

	if len(s) >= l {
		l *= -1
		return s[l:] == suffix
	}
	return false
}

func Split(s string, sep string) []string {
	sLen := len(s)
	sepLen := len(sep)
	elems := []string{}

	// If s and sep are empty, slice will be empty.
	if sLen > 0 || sepLen > 0 {
		startI := 0
		endI := 0
		elIndex := 0
		boundary := len(s)

		if sLen > 0 {
			boundary -= sepLen
		}

		for endI <= boundary {
			if s[endI:endI+sepLen] == sep {
				sepEmpty := sepLen == 0

				// If sep is empty, split after every char.
				if sepEmpty {
					endI++
				}

				if !sepEmpty || endI <= boundary {
					elems[elIndex] = s[startI:endI]
					endI += sepLen
					startI = endI
				}
				elIndex++
			} else if endI == boundary {
				// Add last element to slice.
				elems[elIndex] = s[startI:]
				break
			} else {
				endI++
			}
		}
	}
	return elems
}
